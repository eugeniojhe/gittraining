REMOVENDO ARQUIVOS 
#git rm file_name; 
#git commit -a -m "Comment"; 
#git push  //send commit to server 
#git pull //get commit from server 

Encontrando Branches 
a) Criando branches 
b) git checkout -b "funcionalidade_a"; 
c) Realiza alterações neste branch, 
d) Realiza o commit, 
e) Git push -> Como  com branch "funcionalidade_b" ainda não esta no 
servidor sera reportada a mensagem:
fatal: The current branch funcionalidade_a has no upstream branch.
To push the current branch and set the remote as upstream, use
git push --set-upstream origin funcionalidade_a
f) Após o comando acima o branch esta ligado o servidor. 

A



VERIFICANDO O STATUS DO PROJETO 
#git status 

VERIFICANDO O HISTORICO DAS ATUALIZAÇÕES 
#git log //

MOVENDO ARQUIVOS 
1)Cria se um arquivo css fora da pasta correta
2)Adiciona o arquivo, faz o commit e envia o arquivo para o servidor 
3) Em consequencia o arquivo ficou na pasta indevida - Teria que ser a pasta css 
4) Move se o arquivo para a pasta correta commita e realiza o push para o servidor 
5) Esta soluçao ser tanto para mover um arquivo de uma pasta pra outra, como também  para renomear o arquivo 
#git add . 
#git commit -a -m "Adicionado arquivo css"
#git push 
#git mv rodape.css css\rodapes.css 
#git commit -a -m "Movendo o arquivo para a pasta correta";
$git push 
#cd ..\repo01 - //Ou clica com o botão direito sobre a pasta repo01 - Seleciona   { open in integrated terminak}
#git pull //O arquivo retorna dor servidor ja na pasta correta. 
6) Para renomeação de arquivos, pode ser usado o mesmo critério de mover os arquivos de uma pasta para outra 
7) Desfazendo alterações
8) Após editar um determinado arquivo , 
# git status 
9 o git altera seu status para modified: nome_arquivo. Se manu-
almente defazer as alterações o arquivo ira continuar com modified: nome_arquivo. Para que o status 
de modified, seja desconsiderado:
#git checkout nome_do_arquivo 
#git status // O status modified do arquivo desaparece

10) Ignorando arquivos e diretórios de um projeto 
a) Cria se o arquivo .gitignore relaciona os arquivos e diretórios que não devem ser enviados para
o servidor
# git add . 
# git commit -a -m "Comentario" 
# git push 


11) Clonando um branch  - Copia o link do github.com, na linha de comando do git digita
# git clone link_que_foi_copiando_do_git_hub //Referente ao repósitório a ser clonado
# git branch //Mostra o branch do repositório git, bem como a branch atual em cor verde

12)Criando um novo branch no git - Quando for cria um novo branch, salvo ressalvas, deve se criar
com base no branch master que é branch da versão atual. 
# git branch novo_branch //Cria um novo branch com a mesma strutura do branch atual

13) Excluindo um branch //A principio não se usa excluir branchs, por um questão de histórico 
    so sitema 
# git branch -d nome_do_branch 

14) Mudando de branch //As alterções não comitadas vao para o novo branch e são 
porém serão excluidas do branch origem 
#git checkout nome_no_branch_destino. 
#git checkout -b nome_do_novo_branch //Cria se o novo branch e muda para ele 

15) Para aproveitar o contéudo de um determinado branch, cria se uma pasta 
    vai até o branch no github copia se o código a url, cola a 
    mesma na basta criado no git(PC/Notebook), e em seguida 
    colando as o comando < git clone url> - É melhor que fazer uma copia 
    do diretório atual 
16) Deletando branch - Naõ e comum deletar branchs, até porque são 
    servem com históricos do sistema. 
    git branch -d nome_branch 

17) Fazendo o merge de branch 
    #git merge -nome_do_branch //Faz o merge - realiza a união 
                                 do branch nome_do_branch com 
                                 o branch atual 
    Quando se esta trabalhando em equipe, antes da parte 
    de seu projeto ser aprovada para o merge com  a mestre, é bomo se
    sempre estar fazendo um merge da master para que o seu projeto
    mantenha se atualizado com a equipe. 
18) Desfazendo as alterações de um determinado branch 
 #git stash 
 #git stash //Joga as alterações para um stash - lixo 
#git stash list //Lista as stashs 
#git stash apply nr_stash //Recupara a stash de nr tal 
#git stash show -p 2 //Mostra as alterações realizadas na stash 2

cd #git stash clear // Limpa todas as stashes 
#git stash drop nome //Limpa uma determinada stash 


#git tag -a  Versao -m "Comentário" //Cria estágios do desenvolvimento 
#git show nome_tag //Mostra 
#git checkout nome_tag //Muda de tag // Este comando e bem interessante 
                                    // pois retorna o nosso projeto para 
                                    // um determinado estágio de 
                                    //desenvolvimento 

#git push origin <nome_tag> // Envia um determinada tag para o repositório
#git tag //Lista as tags
#git push origin --tags //Envia todas as tags para o repositório

Muda para o 1_rep
#git checkout -b 'funcionalidade_a"

)Desenvolvedor a 
#Git checkout funcionalidade_a //Cria um branch com algumas funcionalidades
#Emplementa as funciolidades 
#git commit -a -m "Comentario",
#gitg push //Sera reportado que funcionalidade a não tem upstream no branch
         //remoto 
#git push --set-upstream origin funcionalidade_a //Desta forma a branch sera
       //Enviado para o repositório remoto. 
#Outro desenvolvedor tenta mudar para o branch funcionalidade_a 
#git checkout funcionalidada_a //funcionalidade_a did not match any files 
#git fetch -a //Desenvolvedor b consegui trazer toda os branchs 
             //no repositorio remoto que ainda não foi mapeado 
             // para a sua maquina
#git checkout funcionalidade_a 
->Desenvolvor a realiza as alterações a envia  para a maquina remota
#git push 
->Desta forma como a funcionalidade a é do desenvolvedor a, o mesmo necessitara 
dar somente o pull para a sua maquina local.  

Sera reportado que a funcionalide “não tem nenhuma correspondência” 
Git fetch –a // Mostra e recupera todos os branchs remotos. 



19) git remote -v //Mostra as origens conectadas ao repositório. 
    #git remote rm origin //Remove o origen no servidor 
    #git remote -v //A origin já não aparece mais 
    #git remote add origin  url da origem 

19) git submodule 
    a)cria um repositório no servidor remoto, 
    b)clona o repositório como modúlo ele para a maquina do usuário.
        #git submodule add caminho_remoto,  
        #git submodule  
    
    







