REMOVENDO ARQUIVOS 
#git rm file_name; 
#git commit -a -m "Comment"; 
#git push  //send commit to server 
#git pull //get commit from server 



VERIFICANDO O STATUS DO PROJETO 
#git status 

VERIFICANDO O HISTORICO DAS ATUALIZAÇÕES 
#git log //

MOVENDO ARQUIVOS 
1)Cria se um arquivo css fora da pasta correta
2)Adiciona o arquivo, faz o commit e envia o arquivo para o servidor 
3) Em consequencia o arquivo ficou na pasta indevida - Teria que ser a pasta css 
4) Move se o arquivo para a pasta correta commita e realiza o push para o servidor 
5) Esta soluçao ser tanto para mover um arquivo de uma pasta pra outra, como também  para renomear o arquivo 
#git add . 
#git commit -a -m "Adicionado arquivo css"
#git push 
#git mv rodape.css css\rodapes.css 
#git commit -a -m "Movendo o arquivo para a pasta correta";
$git push 
#cd ..\repo01 - //Ou clica com o botão direito sobre a pasta repo01 - Seleciona   { open in integrated terminak}
#git pull //O arquivo retorna dor servidor ja na pasta correta. 
6) Para renomeação de arquivos, pode ser usado o mesmo critério de mover os arquivos de uma pasta para outra 
7) Desfazendo alterações
8) Após editar um determinado arquivo , 
# git status 
9 o git altera seu status para modified: nome_arquivo. Se manu-
almente defazer as alterações o arquivo ira continuar com modified: nome_arquivo. Para que o status 
de modified, seja desconsiderado:
#git checkout nome_do_arquivo 
#git status // O status modified do arquivo desaparece

10) Ignorando arquivos e diretórios de um projeto 
a) Cria se o arquivo .gitignore relaciona os arquivos e diretórios que não devem ser enviados para
o servidor
# git add . 
# git commit -a -m "Comentario" 
# git push 


